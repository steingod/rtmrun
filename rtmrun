#!/usr/bin/perl -w
#
# NAME:
# To perform RTM simulations for clear sky conditions on a full day using
# libRadtran.
#
# It should be possible to perform a time series for a full year on a
# specified station as well.
#
# PURPOSE:
# NA
#
# REQUIREMENTS:
# NA
#
# INPUT:
# NA
#
# OUTPUT:
# NA
#
# NOTES:
# 1 Dobson Unit for Ozone is 0.001 atm-cm
#
# Precipitable water in kg/m2 is about 1 mm
#
# Currently Date::Manip is used for time handling. Timestep is handled in
# the native form of Date::Manip. Other interfaces may be examined
# later...
#
# BUGS:
# NA
#
# AUTHOR:
# Øystein Godøy, METNO/FOU, 16.11.2010 
#
# MODIFIED:
# Øystein Godøy, METNO/FOU, 2012-09-17: Added verbose option and support
# for cdisort_pseudospherical configuration.
#
# CVS_ID:
# $Id: rtmrun,v 1.10 2012-09-17 19:28:55 steingod Exp $
#

use strict;
use Cwd;
#use Date::Calc qw(Parse_Date Decode_Date_EU);
#use Date::Manip qw(ParseDate);
use Date::Manip;
use Getopt::Std;
use DateTime::Format::HTTP qw(parse_datetime);

use vars qw($opt_h $opt_c $opt_v);

sub usage;
sub decode_cfg;

my $verbose = 0;
my(%locations,%uvspeccfg,%position,%myperiod);
my($mydate);
my($timecnt,$cfgcnt);
my($myyear,$mymon,$mymday,$myhour,$mymin,$mydoy); 
my($sza, $tmp, $key, $value, $cwd, $ssi);

usage if !getopts("hc:v");
usage if ($opt_h || !$opt_c);
my $cfgfile = $opt_c;
$verbose = 1 if ($opt_v);

# Decode configuration file
die "Failed to decode configuration file...\n" unless (decode_cfg(\%locations,\%uvspeccfg,\%position,\%myperiod));

print("zenith: $locations{zenith}\n");
print("uvspec: $locations{uvspec}\n");
print("atmosphere_file: $locations{atmosphere_file}\n");
print("solar_file: $locations{solar_file}\n");
print("outfile: $locations{outfile}\n");
print("tmpfile: $locations{tmpfile}\n");
print("errfile: $locations{errfile}\n");

print("Latitude: $position{lat}\n");
print("Longitude: $position{lon}\n");

print("startdate: $myperiod{startdate}\n");
print("enddate: $myperiod{enddate}\n");
print("timestep: $myperiod{step}\n");

#my $class = 'DateTime::Format::HTTP';
#my $time = $class->parse_datetime($myperiod{startdate});
#my $time = parse_datetime($myperiod{startdate});
#print(">>> $time\n");
#print(">>> ".$time->year()."\n");

#exit; # while testing datetime....

my $mystartdate = ParseDate($myperiod{startdate});
my $myenddate = ParseDate($myperiod{enddate});
my $tz = Date_TimeZone;
print("Timezone: $tz\n");

# Generate date and time list to process
my @mydates = ParseRecur($myperiod{step},$mystartdate,$mystartdate,$myenddate);

# Do the estimates...
$cwd = getcwd();
print "$locations{libradtran}\n";
chdir "$locations{libradtran}"."/bin" or die "Could not change directory";
open FP1, ">$cwd/$locations{outfile}" or die "Can't open $cwd/$locations{outfile}";
foreach $mydate (@mydates) {
    
    # Do the time preparation
    $mydoy = UnixDate($mydate,"%j");
    $myyear = UnixDate($mydate,"%Y");
    $mymon = UnixDate($mydate,"%m");
    $mymday = UnixDate($mydate,"%d");
    $myhour = UnixDate($mydate,"%H");
    $mymin = UnixDate($mydate,"%M");
    
    # Estimate solar zenith angle
    $tmp = qx/$locations{zenith} -a $position{'lat'} -o $position{'lon'} -y $myyear $mymday $mymon $myhour $mymin 0/;
    $sza = (split / +/,$tmp)[1];

    # Create configuration file for uvspec
    $cfgcnt = "";
    $cfgcnt .= "atmosphere_file $locations{atmosphere_file}\n";
    $cfgcnt .= "solar_file $locations{solar_file}\n";
    while (($key, $value) = each %uvspeccfg) {
        if ($value eq "NOVALUE") {
            $cfgcnt .= "$key\n";
        } else {
            $cfgcnt .= "$key $value\n";
        }
        #print("$key - $value\n");
    }
    $cfgcnt .= "sza $sza\n";
    $cfgcnt .= "day_of_year $mydoy\n";
    $cfgcnt .= "quiet\n";

    open FP2, ">$cwd/$locations{tmpfile}" or die "Can't open $cwd/$locations{tmpfile}\n";
    print FP2 "$cfgcnt";
    close FP2;

    # Do the actual calculations and dump output after parsing
    if ($verbose) {
        $tmp = qx/$locations{uvspec} < $cwd\/$locations{tmpfile}/;
    } else {
        $tmp = qx/$locations{uvspec} < $cwd\/$locations{tmpfile} 2>$cwd\/$locations{errfile}/;
        unlink "$cwd/$locations{tmpfile}";
    }
    next unless defined($ssi = (split / +/,$tmp)[2]);

    printf FP1 "%s %6.2f %6.2f\n",UnixDate($mydate,"%Y-%m-%dT%R %j"),$sza,$ssi;
};
close FP1;

chdir $cwd;

exit;

###########################################################

sub usage {
    print("$0 [-hv] -c <file>\n");
    print("\t-h: print this\n");
    print("\t-c: configuration file\n");
    print("\t-v: verbose and leave temporary files\n");
    exit;
}

sub decode_cfg {

    my($locationsref,$uvspeccfgref,$posref,$periodref) = @_;
#    my $locationsref = shift @_;
#    my $uvspeccfgref = shift @_;
#    my $posref = shift @_;
#    my $periodref = shift @_;

    my(@fc, $record, $keyw, $value);

    open FP, "<$cfgfile";
    @fc = <FP>;
    close FP;

    foreach $record (@fc) {
        next if ($record =~ m/^#/);
        next if ($record =~ m/^\s/);
        ($keyw, $value) = split(/=>/,$record, 2);
        $value =~ s/^\s+//;
        $value =~ s/\n$//;
        $value =~ s/#(.+)$//;
        $keyw =~ s/\s+$//;

        # Get locations of software, files etc
        $locationsref->{libradtran} = $value if ($keyw =~ m/libradtran/);
        $locationsref->{zenith} = $value if ($keyw =~ m/zenith/);
        $locationsref->{uvspec} = $value if ($keyw =~ m/uvspec/);
        $locationsref->{atmosphere_file} = $value if ($keyw =~ m/atmosphere_file/);
        $locationsref->{solar_file} = $value if ($keyw =~ m/solar_file/);
        $locationsref->{outfile} = $value if ($keyw =~ m/outfile/);
        $locationsref->{tmpfile} = $value if ($keyw =~ m/tmpfile/);
        $locationsref->{errfile} = $value if ($keyw =~ m/errfile/);

        # Get specifications for libRadtran model setup
        $uvspeccfgref->{rte_solver} = $value if ($keyw =~ m/rte_solver/);
        $uvspeccfgref->{deltam} = $value if ($keyw =~ m/deltam/);
        $uvspeccfgref->{nstr} = $value if ($keyw =~ m/nstr/);
        $uvspeccfgref->{wavelength} = $value if ($keyw =~ m/wavelength/);
        $uvspeccfgref->{correlated_k} = $value if ($keyw =~ m/correlated_k/);
        $uvspeccfgref->{output} = $value if ($keyw =~ m/output$/);
        $uvspeccfgref->{output_user} = $value if ($keyw =~ m/output_user$/);
        $uvspeccfgref->{albedo} = $value if ($keyw =~ m/albedo/);
        $uvspeccfgref->{dens_column} = $value if ($keyw =~ m/dens_column/);
        $uvspeccfgref->{h2o_precip} = $value if ($keyw =~ m/h2o_precip/);
        $uvspeccfgref->{cdisort_pseudospherical} = $value if ($keyw =~ m/cdisort_pseudospherical/);

        # Get location
        $posref->{lat} = $value if ($keyw =~ m/latitude/);
        $posref->{lon} = $value if ($keyw =~ m/longitude/);
        
        # Get period specification
        $periodref->{startdate} = $value if ($keyw =~ m/startdate/);
        $periodref->{enddate} = $value if ($keyw =~ m/enddate/);
        $periodref->{step} = $value if ($keyw =~ m/timestep/);

        print("$keyw - [$value]\n");
    }

    return(1);
}
